/*
we need to find longest length continuous subarray with equal number of 0 and 1

we will use the property that if we replace 0 's with -1's  in an subarray than sum of subarray with equal number of zero and ones is zero

we will than use a hash map for this it will have sum till current index as key and value the index at which sum turned out to be zero other sum already in map
*/

class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        if(nums.size()<=1)
        {
            return 0;
        }
        
        unordered_map<int,int>mp;
        int longest_length = 0;
        int sum=0;
        
        for(int i=0;i<nums.size();i++)
        {  
            sum += nums[i]==0?-1:1;              //adding -1 for 0
            if(sum==0)                               //if sum is zero than ll = indx+1 that is length of subarray
            {  if(longest_length<i+1) 
                   longest_length=i+1;
            }
            else if(mp.find(sum)!=mp.end())          //check if sum is already in map if yes this means between 
                {                                    //elements sum turned out to be zero so need to change the length
                    if(longest_length<i-mp[sum])
                    {
                        longest_length = i-mp[sum];  //it will  be current index-index where it previously occured
                    }
                }
              else{
                  mp[sum] = i;
                  }
            
        }
        return longest_length;
    }
};
